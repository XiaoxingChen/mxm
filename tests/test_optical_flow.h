#if !defined(_TEST_OPTICAL_FLOW_H_)
#define _TEST_OPTICAL_FLOW_H_

#include "mxm/cv_optical_flow.h"

using namespace mxm;

inline void testOpticalFlow01()
{

    Matrix<float> img_src({10,10},{
    0.728477, 0.738667, 0.742198, 0.740368, 0.202688, 0.202093, 0.396650, 0.146337, 0.122355, 0.146413,
    0.729365, 0.741939, 0.741963, 0.732592, 0.203782, 0.198433, 0.224574, 0.151642, 0.129539, 0.138128,
    0.739210, 0.747917, 0.763549, 0.754586, 0.209937, 0.207427, 0.225369, 0.158959, 0.131804, 0.131380,
    0.747199, 0.749010, 0.744749, 0.739371, 0.223127, 0.221234, 0.235101, 0.171105, 0.141303, 0.131942,
    0.731056, 0.728681, 0.738670, 0.737562, 0.237027, 0.221071, 0.206156, 0.213845, 0.165395, 0.169257,
    0.734579, 0.747274, 0.742033, 0.741567, 1.000000, 1.000000, 1.000000, 0.667364, 0.474437, 0.471119,
    0.728121, 0.743577, 0.737193, 0.726273, 0.488382, 0.527345, 0.521204, 0.532807, 0.532487, 0.539641,
    0.726185, 0.730662, 0.741055, 0.728702, 0.593368, 0.592831, 0.607792, 0.616938, 0.626886, 0.621880,
    0.733106, 0.735595, 0.735357, 0.734247, 0.640797, 0.676948, 0.670513, 0.675325, 0.676174, 0.537598,
    0.719476, 0.729672, 0.729159, 0.711013, 0.640093, 0.706950, 0.710095, 0.708683, 0.718765, 0.637561});

    Matrix<float> img_dst({10,10},{
    0.739375, 0.727789, 0.738788, 0.196384, 0.204684, 0.193142, 0.133016, 0.166410, 0.172674, 0.203761,
    0.752167, 0.750970, 0.736622, 0.199605, 0.203890, 0.199375, 0.128724, 0.123252, 0.176880, 0.192431,
    0.741299, 0.737392, 0.741989, 0.209215, 0.210507, 0.198722, 0.134693, 0.122141, 0.172826, 0.192116,
    0.743762, 0.739648, 0.727156, 0.213600, 0.201880, 0.201673, 0.142557, 0.121990, 0.156867, 0.189747,
    0.749497, 0.747164, 0.740661, 0.217326, 0.219616, 0.221138, 0.143902, 0.123084, 0.157125, 0.188319,
    0.746271, 0.748485, 0.736478, 0.243135, 0.229183, 0.236010, 0.144684, 0.114794, 0.143544, 0.182791,
    0.748378, 0.751336, 0.724158, 0.997620, 0.998423, 0.996710, 0.995638, 0.993083, 0.369580, 0.344870,
    0.747675, 0.753151, 0.736575, 1.000000, 0.724671, 0.486836, 0.499548, 0.510472, 0.523373, 0.512763,
    0.743344, 0.736117, 0.726622, 0.547995, 0.559084, 0.552397, 0.569309, 0.563253, 0.572095, 0.574869,
    0.721605, 0.741491, 0.728100, 0.619777, 0.622829, 0.634613, 0.627952, 0.635077, 0.586497, 0.600178});

    Matrix<float> gauss3x3({3,3}, {
    0.0625, 0.125 , 0.0625,
    0.125 , 0.25  , 0.125 ,
    0.0625, 0.125 , 0.0625});

    std::vector<Matrix<float>> imgs{img_src, img_dst};
    img_src = convolute(imgs.at(0), gauss3x3);
    img_dst = convolute(imgs.at(1), gauss3x3);
    Matrix<float> fp_src(fixCol(1), {3,4});
    Matrix<size_t> fp_dst_expected(fixCol(1), {4,3});
    // Matrix<float> fp_dst(fp_src);
    size_t window_width = 5;
    auto fp_dst = lkOpticalFlow(img_src, img_dst, fp_src, window_width);
    // std::cout << mxm::to_string(fp_dst, 3) << std::endl;
    if(fp_dst_expected != Matrix<size_t>(fp_dst + 0.5))
    {
        throw std::runtime_error(std::string(__FILE__) + ":" + std::to_string(__LINE__));
    }

}



#endif // _TEST_OPTICAL_FLOW_H_
