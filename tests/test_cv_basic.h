#if !defined(_TEST_PIXEL_H_)
#define _TEST_PIXEL_H_
#include "test_config.h"

#if TEST_AVAILABLE_CV_BASIC
#include <iostream>
#include "mxm/cv_basic.h"
#include "mxm/linalg.h"
#include "mxm/cv_kernel.h"
#include "mxm/random.h"
#include "mxm/cv_corner.h"
#include "mxm/cv_3d.h"


using namespace mxm;

// Data source:
// EuroC V1_01_easy cam0 1403715287062142976.png (200,303)
inline const Matrix<float>& dataImagePatch()
{
    static Matrix<float> patch({41,41}, {
    0.533333, 0.545098, 0.549020, 0.552941, 0.549020, 0.560784, 0.560784, 0.560784, 0.545098, 0.552941, 0.588235, 0.615686, 0.639216, 0.654902, 0.654902, 0.658824, 0.650980, 0.666667, 0.666667, 0.737255, 0.905882, 0.921569, 0.831373, 0.815686, 0.792157, 0.847059, 0.972549, 0.960784, 0.796078, 0.631373, 0.619608, 0.658824, 0.686275, 0.705882, 0.705882, 0.690196, 0.690196, 0.674510, 0.662745, 0.686275, 0.701961,
    0.447059, 0.466667, 0.494118, 0.509804, 0.521569, 0.533333, 0.552941, 0.556863, 0.552941, 0.560784, 0.529412, 0.529412, 0.564706, 0.580392, 0.588235, 0.607843, 0.603922, 0.607843, 0.607843, 0.666667, 0.776471, 0.827451, 0.827451, 0.819608, 0.807843, 0.831373, 0.905882, 1.000000, 0.917647, 0.698039, 0.631373, 0.631373, 0.690196, 0.686275, 0.690196, 0.670588, 0.690196, 0.666667, 0.682353, 0.674510, 0.709804,
    0.262745, 0.270588, 0.294118, 0.325490, 0.349020, 0.388235, 0.423529, 0.462745, 0.482353, 0.490196, 0.486275, 0.486275, 0.505882, 0.560784, 0.600000, 0.615686, 0.647059, 0.647059, 0.647059, 0.694118, 0.756863, 0.874510, 0.878431, 0.839216, 0.803922, 0.807843, 0.843137, 0.976471, 1.000000, 0.796078, 0.647059, 0.619608, 0.674510, 0.666667, 0.662745, 0.682353, 0.690196, 0.678431, 0.670588, 0.666667, 0.678431,
    0.254902, 0.227451, 0.215686, 0.211765, 0.211765, 0.231373, 0.294118, 0.352941, 0.364706, 0.333333, 0.305882, 0.282353, 0.333333, 0.478431, 0.603922, 0.678431, 0.678431, 0.682353, 0.670588, 0.690196, 0.760784, 0.886275, 0.996078, 0.850980, 0.796078, 0.796078, 0.811765, 0.886275, 1.000000, 0.933333, 0.733333, 0.631373, 0.635294, 0.647059, 0.674510, 0.670588, 0.678431, 0.686275, 0.674510, 0.654902, 0.666667,
    0.400000, 0.313726, 0.227451, 0.211765, 0.207843, 0.262745, 0.345098, 0.325490, 0.337255, 0.309804, 0.235294, 0.215686, 0.239216, 0.419608, 0.741176, 0.850980, 0.878431, 0.854902, 0.823529, 0.733333, 0.764706, 0.800000, 0.870588, 0.823529, 0.796078, 0.796078, 0.811765, 0.835294, 0.972549, 1.000000, 0.850980, 0.670588, 0.615686, 0.643137, 0.686275, 0.682353, 0.682353, 0.686275, 0.678431, 0.670588, 0.682353,
    0.580392, 0.486275, 0.298039, 0.215686, 0.215686, 0.239216, 0.254902, 0.262745, 0.266667, 0.247059, 0.207843, 0.192157, 0.215686, 0.392157, 0.768627, 0.917647, 0.964706, 0.980392, 0.960784, 0.827451, 0.776471, 0.764706, 0.800000, 0.803922, 0.811765, 0.807843, 0.803922, 0.796078, 0.894118, 1.000000, 0.972549, 0.745098, 0.627451, 0.635294, 0.658824, 0.674510, 0.678431, 0.694118, 0.686275, 0.674510, 0.678431,
    0.662745, 0.564706, 0.329412, 0.247059, 0.219608, 0.207843, 0.207843, 0.211765, 0.200000, 0.196078, 0.192157, 0.192157, 0.200000, 0.313726, 0.627451, 0.807843, 0.870588, 0.894118, 0.925490, 0.847059, 0.768627, 0.756863, 0.780392, 0.827451, 0.882353, 0.815686, 0.796078, 0.815686, 0.815686, 0.929412, 1.000000, 0.898039, 0.678431, 0.607843, 0.635294, 0.666667, 0.650980, 0.674510, 0.674510, 0.666667, 0.662745,
    0.686275, 0.552941, 0.392157, 0.305882, 0.223529, 0.203922, 0.196078, 0.188235, 0.184314, 0.192157, 0.192157, 0.203922, 0.223529, 0.274510, 0.372549, 0.427451, 0.447059, 0.494118, 0.639216, 0.780392, 0.752941, 0.733333, 0.764706, 0.870588, 0.972549, 0.874510, 0.815686, 0.796078, 0.792157, 0.843137, 0.972549, 0.980392, 0.737255, 0.615686, 0.607843, 0.654902, 0.647059, 0.666667, 0.690196, 0.690196, 0.670588,
    0.647059, 0.866667, 0.898039, 0.545098, 0.266667, 0.215686, 0.192157, 0.184314, 0.188235, 0.192157, 0.200000, 0.231373, 0.309804, 0.478431, 0.701961, 0.584314, 0.325490, 0.282353, 0.325490, 0.478431, 0.643137, 0.701961, 0.725490, 0.772549, 0.870588, 0.827451, 0.796078, 0.811765, 0.807843, 0.823529, 0.901961, 0.992157, 0.854902, 0.647059, 0.600000, 0.635294, 0.647059, 0.658824, 0.678431, 0.670588, 0.674510,
    0.478431, 0.976471, 1.000000, 0.819608, 0.341176, 0.227451, 0.200000, 0.184314, 0.192157, 0.196078, 0.219608, 0.364706, 0.588235, 0.662745, 0.611765, 0.513726, 0.345098, 0.254902, 0.247059, 0.278431, 0.388235, 0.529412, 0.635294, 0.733333, 0.756863, 0.772549, 0.796078, 0.815686, 0.803922, 0.819608, 0.835294, 0.933333, 0.964706, 0.745098, 0.615686, 0.592157, 0.635294, 0.662745, 0.682353, 0.690196, 0.694118,
    0.368627, 0.721569, 0.984314, 0.803922, 0.341176, 0.215686, 0.200000, 0.196078, 0.188235, 0.192157, 0.227451, 0.333333, 0.364706, 0.376471, 0.349020, 0.305882, 0.262745, 0.239216, 0.235294, 0.243137, 0.270588, 0.317647, 0.458824, 0.611765, 0.701961, 0.760784, 0.862745, 0.847059, 0.800000, 0.807843, 0.803922, 0.882353, 0.976471, 0.882353, 0.670588, 0.603922, 0.615686, 0.650980, 0.662745, 0.662745, 0.682353,
    0.396078, 0.392157, 0.419608, 0.349020, 0.243137, 0.203922, 0.200000, 0.192157, 0.192157, 0.192157, 0.203922, 0.219608, 0.254902, 0.278431, 0.250980, 0.235294, 0.227451, 0.231373, 0.250980, 0.278431, 0.278431, 0.286275, 0.294118, 0.380392, 0.564706, 0.733333, 0.905882, 0.909804, 0.803922, 0.784314, 0.780392, 0.815686, 0.933333, 0.960784, 0.772549, 0.603922, 0.588235, 0.615686, 0.654902, 0.654902, 0.658824,
    0.682353, 0.435294, 0.321569, 0.262745, 0.231373, 0.219608, 0.203922, 0.203922, 0.196078, 0.200000, 0.207843, 0.227451, 0.239216, 0.235294, 0.231373, 0.215686, 0.215686, 0.243137, 0.384314, 0.564706, 0.490196, 0.380392, 0.290196, 0.282353, 0.372549, 0.576471, 0.733333, 0.819608, 0.788235, 0.776471, 0.780392, 0.788235, 0.839216, 0.949020, 0.898039, 0.690196, 0.600000, 0.596078, 0.635294, 0.647059, 0.639216,
    0.905882, 0.749020, 0.541176, 0.337255, 0.262745, 0.215686, 0.203922, 0.200000, 0.196078, 0.196078, 0.227451, 0.317647, 0.337255, 0.313726, 0.274510, 0.250980, 0.239216, 0.286275, 0.658824, 0.956863, 0.968627, 0.807843, 0.380392, 0.309804, 0.482353, 0.603922, 0.572549, 0.611765, 0.709804, 0.756863, 0.760784, 0.764706, 0.788235, 0.870588, 0.968627, 0.815686, 0.627451, 0.592157, 0.603922, 0.623529, 0.631373,
    0.964706, 0.929412, 0.835294, 0.615686, 0.376471, 0.274510, 0.231373, 0.207843, 0.203922, 0.196078, 0.274510, 0.588235, 0.749020, 0.674510, 0.541176, 0.392157, 0.266667, 0.278431, 0.450980, 0.615686, 0.760784, 0.737255, 0.372549, 0.298039, 0.403922, 0.400000, 0.329412, 0.380392, 0.596078, 0.694118, 0.721569, 0.756863, 0.780392, 0.811765, 0.937255, 0.921569, 0.717647, 0.592157, 0.611765, 0.631373, 0.631373,
    0.972549, 0.933333, 0.941176, 0.854902, 0.690196, 0.443137, 0.298039, 0.239216, 0.215686, 0.207843, 0.231373, 0.435294, 0.831373, 0.909804, 0.905882, 0.709804, 0.317647, 0.239216, 0.250980, 0.278431, 0.298039, 0.301961, 0.247059, 0.219608, 0.239216, 0.243137, 0.250980, 0.266667, 0.333333, 0.458824, 0.600000, 0.701961, 0.737255, 0.776471, 0.854902, 0.956863, 0.823529, 0.643137, 0.596078, 0.607843, 0.639216,
    0.949020, 0.972549, 0.945098, 0.901961, 0.874510, 0.752941, 0.537255, 0.341176, 0.235294, 0.219608, 0.215686, 0.270588, 0.384314, 0.466667, 0.509804, 0.407843, 0.250980, 0.223529, 0.231373, 0.250980, 0.262745, 0.231373, 0.215686, 0.207843, 0.219608, 0.266667, 0.290196, 0.274510, 0.278431, 0.286275, 0.364706, 0.517647, 0.654902, 0.745098, 0.788235, 0.929412, 0.921569, 0.717647, 0.600000, 0.580392, 0.611765,
    0.960784, 0.945098, 0.976471, 0.952941, 0.937255, 0.917647, 0.803922, 0.600000, 0.392157, 0.250980, 0.211765, 0.219608, 0.235294, 0.247059, 0.247059, 0.239216, 0.223529, 0.223529, 0.298039, 0.411765, 0.396078, 0.305882, 0.243137, 0.207843, 0.235294, 0.407843, 0.556863, 0.419608, 0.349020, 0.309804, 0.313726, 0.364706, 0.482353, 0.639216, 0.745098, 0.843137, 0.945098, 0.839216, 0.619608, 0.560784, 0.588235,
    0.972549, 0.952941, 0.980392, 0.972549, 0.956863, 0.949020, 0.917647, 0.819608, 0.662745, 0.462745, 0.298039, 0.215686, 0.188235, 0.219608, 0.219608, 0.211765, 0.211765, 0.239216, 0.494118, 0.945098, 0.937255, 0.647059, 0.301961, 0.219608, 0.250980, 0.572549, 0.886275, 0.898039, 0.725490, 0.584314, 0.505882, 0.478431, 0.447059, 0.494118, 0.611765, 0.733333, 0.866667, 0.921569, 0.725490, 0.580392, 0.537255,
    0.968627, 0.933333, 0.964706, 0.952941, 0.964706, 0.964706, 0.960784, 0.933333, 0.866667, 0.717647, 0.541176, 0.376471, 0.243137, 0.203922, 0.207843, 0.215686, 0.215686, 0.250980, 0.596078, 1.000000, 1.000000, 0.807843, 0.325490, 0.223529, 0.219608, 0.305882, 0.545098, 0.854902, 0.988235, 1.000000, 1.000000, 0.972549, 0.886275, 0.709804, 0.443137, 0.505882, 0.709804, 0.909804, 0.858824, 0.615686, 0.517647,
    0.941176, 0.917647, 0.913725, 0.925490, 0.937255, 0.945098, 0.941176, 0.952941, 0.937255, 0.878431, 0.780392, 0.643137, 0.458824, 0.301961, 0.223529, 0.215686, 0.219608, 0.258824, 0.541176, 1.000000, 1.000000, 0.596078, 0.266667, 0.219608, 0.219608, 0.247059, 0.298039, 0.392157, 0.509804, 0.615686, 0.713726, 0.831373, 0.870588, 0.650980, 0.341176, 0.341176, 0.505882, 0.803922, 0.921569, 0.741176, 0.525490,
    0.937255, 0.901961, 0.913725, 0.913725, 0.905882, 0.909804, 0.937255, 0.960784, 0.941176, 0.929412, 0.890196, 0.850980, 0.709804, 0.533333, 0.364706, 0.254902, 0.231373, 0.262745, 0.549020, 0.996078, 0.909804, 0.392157, 0.235294, 0.219608, 0.239216, 0.329412, 0.388235, 0.372549, 0.301961, 0.298039, 0.309804, 0.349020, 0.384314, 0.352941, 0.356863, 0.447059, 0.556863, 0.756863, 0.890196, 0.792157, 0.521569,
    0.890196, 0.890196, 0.901961, 0.913725, 0.921569, 0.941176, 0.952941, 0.952941, 0.964706, 0.933333, 0.921569, 0.921569, 0.878431, 0.784314, 0.647059, 0.447059, 0.301961, 0.270588, 0.376471, 0.596078, 0.525490, 0.270588, 0.223529, 0.215686, 0.278431, 0.643137, 0.890196, 0.717647, 0.423529, 0.301961, 0.298039, 0.333333, 0.403922, 0.505882, 0.631373, 0.709804, 0.737255, 0.729412, 0.701961, 0.556863, 0.478431,
    0.780392, 0.776471, 0.780392, 0.803922, 0.831373, 0.862745, 0.878431, 0.913725, 0.929412, 0.937255, 0.952941, 0.933333, 0.925490, 0.898039, 0.854902, 0.745098, 0.552941, 0.356863, 0.286275, 0.270588, 0.262745, 0.235294, 0.207843, 0.211765, 0.254902, 0.498039, 0.921569, 1.000000, 0.827451, 0.494118, 0.513726, 0.619608, 0.705882, 0.737255, 0.713726, 0.658824, 0.588235, 0.470588, 0.360784, 0.356863, 0.431373,
    0.776471, 0.768627, 0.752941, 0.745098, 0.756863, 0.780392, 0.784314, 0.803922, 0.803922, 0.835294, 0.850980, 0.905882, 0.894118, 0.917647, 0.898039, 0.886275, 0.815686, 0.627451, 0.396078, 0.286275, 0.247059, 0.223529, 0.215686, 0.231373, 0.258824, 0.349020, 0.658824, 1.000000, 0.984314, 0.831373, 0.756863, 0.756863, 0.705882, 0.647059, 0.513726, 0.380392, 0.294118, 0.262745, 0.274510, 0.345098, 0.427451,
    0.847059, 0.780392, 0.752941, 0.776471, 0.784314, 0.784314, 0.760784, 0.749020, 0.784314, 0.772549, 0.760784, 0.776471, 0.788235, 0.811765, 0.858824, 0.882353, 0.905882, 0.847059, 0.666667, 0.439216, 0.294118, 0.274510, 0.294118, 0.337255, 0.427451, 0.560784, 0.733333, 0.815686, 0.803922, 0.756863, 0.690196, 0.568627, 0.415686, 0.305882, 0.258824, 0.231373, 0.227451, 0.247059, 0.290196, 0.376471, 0.439216,
    0.768627, 0.760784, 0.760784, 0.772549, 0.807843, 0.792157, 0.760784, 0.749020, 0.784314, 0.807843, 0.752941, 0.760784, 0.749020, 0.764706, 0.772549, 0.803922, 0.823529, 0.870588, 0.850980, 0.733333, 0.490196, 0.427451, 0.552941, 0.650980, 0.701961, 0.745098, 0.709804, 0.674510, 0.588235, 0.454902, 0.345098, 0.270588, 0.243137, 0.219608, 0.211765, 0.203922, 0.223529, 0.337255, 0.486275, 0.427451, 0.450980,
    0.780392, 0.768627, 0.772549, 0.741176, 0.752941, 0.733333, 0.725490, 0.741176, 0.792157, 0.807843, 0.800000, 0.733333, 0.772549, 0.788235, 0.776471, 0.749020, 0.741176, 0.760784, 0.803922, 0.811765, 0.764706, 0.678431, 0.721569, 0.741176, 0.682353, 0.607843, 0.478431, 0.349020, 0.282353, 0.250980, 0.243137, 0.235294, 0.215686, 0.203922, 0.211765, 0.207843, 0.250980, 0.549020, 0.694118, 0.466667, 0.447059,
    0.854902, 0.823529, 0.835294, 0.788235, 0.768627, 0.733333, 0.737255, 0.717647, 0.733333, 0.745098, 0.737255, 0.745098, 0.800000, 0.866667, 0.854902, 0.772549, 0.760784, 0.752941, 0.760784, 0.756863, 0.800000, 0.800000, 0.701961, 0.588235, 0.431373, 0.333333, 0.274510, 0.235294, 0.215686, 0.231373, 0.286275, 0.313726, 0.278431, 0.243137, 0.235294, 0.235294, 0.290196, 0.576471, 0.600000, 0.466667, 0.447059,
    0.858824, 0.866667, 0.878431, 0.874510, 0.831373, 0.756863, 0.737255, 0.749020, 0.760784, 0.760784, 0.745098, 0.760784, 0.760784, 0.776471, 0.784314, 0.780392, 0.819608, 0.835294, 0.760784, 0.768627, 0.772549, 0.776471, 0.764706, 0.635294, 0.419608, 0.298039, 0.250980, 0.219608, 0.219608, 0.266667, 0.592157, 0.678431, 0.525490, 0.400000, 0.364706, 0.341176, 0.329412, 0.427451, 0.482353, 0.450980, 0.454902,
    0.800000, 0.800000, 0.803922, 0.831373, 0.827451, 0.776471, 0.729412, 0.772549, 0.839216, 0.819608, 0.756863, 0.756863, 0.756863, 0.764706, 0.760784, 0.784314, 0.803922, 0.850980, 0.823529, 0.784314, 0.772549, 0.756863, 0.756863, 0.733333, 0.650980, 0.454902, 0.301961, 0.231373, 0.219608, 0.278431, 0.623529, 0.890196, 0.933333, 0.866667, 0.749020, 0.623529, 0.631373, 0.611765, 0.478431, 0.458824, 0.458824,
    0.913725, 0.890196, 0.862745, 0.854902, 0.784314, 0.760784, 0.752941, 0.764706, 0.866667, 0.874510, 0.760784, 0.745098, 0.749020, 0.807843, 0.823529, 0.811765, 0.796078, 0.788235, 0.772549, 0.768627, 0.803922, 0.839216, 0.784314, 0.741176, 0.713726, 0.662745, 0.498039, 0.321569, 0.235294, 0.223529, 0.305882, 0.498039, 0.776471, 0.901961, 0.866667, 0.694118, 0.721569, 0.560784, 0.447059, 0.454902, 0.458824,
    0.850980, 0.850980, 0.866667, 0.839216, 0.772549, 0.741176, 0.737255, 0.745098, 0.784314, 0.780392, 0.760784, 0.745098, 0.756863, 0.866667, 0.929412, 0.917647, 0.866667, 0.815686, 0.792157, 0.776471, 0.764706, 0.823529, 0.839216, 0.776471, 0.717647, 0.694118, 0.670588, 0.552941, 0.376471, 0.250980, 0.239216, 0.286275, 0.494118, 0.662745, 0.623529, 0.517647, 0.388235, 0.364706, 0.419608, 0.458824, 0.458824,
    0.823529, 0.811765, 0.811765, 0.780392, 0.760784, 0.760784, 0.749020, 0.768627, 0.776471, 0.792157, 0.764706, 0.752941, 0.741176, 0.874510, 0.952941, 0.968627, 0.949020, 0.882353, 0.847059, 0.788235, 0.764706, 0.760784, 0.752941, 0.733333, 0.733333, 0.713726, 0.713726, 0.682353, 0.596078, 0.415686, 0.282353, 0.262745, 0.360784, 0.419608, 0.313726, 0.231373, 0.235294, 0.349020, 0.447059, 0.454902, 0.458824,
    0.898039, 0.925490, 0.886275, 0.882353, 0.815686, 0.764706, 0.741176, 0.745098, 0.819608, 0.933333, 0.815686, 0.725490, 0.752941, 0.866667, 0.937255, 0.964706, 0.949020, 0.929412, 0.898039, 0.870588, 0.796078, 0.760784, 0.752941, 0.741176, 0.737255, 0.780392, 0.784314, 0.737255, 0.686275, 0.603922, 0.462745, 0.305882, 0.250980, 0.219608, 0.196078, 0.188235, 0.223529, 0.439216, 0.541176, 0.509804, 0.474510,
    0.827451, 0.831373, 0.831373, 0.839216, 0.788235, 0.760784, 0.764706, 0.745098, 0.772549, 0.870588, 0.815686, 0.752941, 0.741176, 0.807843, 0.905882, 0.952941, 0.945098, 0.921569, 0.925490, 0.905882, 0.898039, 0.843137, 0.784314, 0.752941, 0.745098, 0.776471, 0.807843, 0.749020, 0.709804, 0.670588, 0.611765, 0.482353, 0.321569, 0.223529, 0.184314, 0.184314, 0.258824, 0.490196, 0.607843, 0.607843, 0.541176,
    0.858824, 0.870588, 0.870588, 0.858824, 0.815686, 0.752941, 0.741176, 0.713726, 0.741176, 0.800000, 0.807843, 0.749020, 0.725490, 0.800000, 0.894118, 0.921569, 0.941176, 0.929412, 0.925490, 0.921569, 0.937255, 0.917647, 0.854902, 0.784314, 0.717647, 0.741176, 0.733333, 0.729412, 0.698039, 0.686275, 0.662745, 0.619608, 0.505882, 0.352941, 0.235294, 0.200000, 0.321569, 0.537255, 0.631373, 0.650980, 0.627451,
    0.772549, 0.772549, 0.792157, 0.811765, 0.784314, 0.749020, 0.733333, 0.737255, 0.752941, 0.850980, 0.874510, 0.764706, 0.713726, 0.745098, 0.854902, 0.905882, 0.937255, 0.909804, 0.909804, 0.909804, 0.921569, 0.921569, 0.933333, 0.870588, 0.819608, 0.760784, 0.721569, 0.713726, 0.698039, 0.737255, 0.749020, 0.694118, 0.619608, 0.533333, 0.392157, 0.274510, 0.368627, 0.513726, 0.619608, 0.647059, 0.619608,
    0.733333, 0.760784, 0.737255, 0.729412, 0.741176, 0.733333, 0.721569, 0.713726, 0.733333, 0.764706, 0.784314, 0.733333, 0.713726, 0.713726, 0.823529, 0.890196, 0.874510, 0.878431, 0.890196, 0.898039, 0.929412, 0.941176, 0.933333, 0.925490, 0.890196, 0.819608, 0.752941, 0.729412, 0.729412, 0.729412, 0.745098, 0.701961, 0.670588, 0.631373, 0.572549, 0.466667, 0.431373, 0.447059, 0.541176, 0.607843, 0.600000,
    0.729412, 0.745098, 0.733333, 0.733333, 0.741176, 0.725490, 0.717647, 0.713726, 0.725490, 0.733333, 0.811765, 0.764706, 0.698039, 0.733333, 0.815686, 0.890196, 0.862745, 0.831373, 0.854902, 0.913725, 0.929412, 0.929412, 0.937255, 0.921569, 0.909804, 0.898039, 0.831373, 0.745098, 0.733333, 0.717647, 0.698039, 0.678431, 0.686275, 0.682353, 0.658824, 0.584314, 0.474510, 0.396078, 0.447059, 0.501961, 0.552941,
    0.752941, 0.749020, 0.749020, 0.737255, 0.741176, 0.737255, 0.709804, 0.713726, 0.725490, 0.768627, 0.909804, 0.831373, 0.717647, 0.725490, 0.784314, 0.866667, 0.878431, 0.878431, 0.890196, 0.901961, 0.941176, 0.921569, 0.937255, 0.937255, 0.933333, 0.917647, 0.878431, 0.835294, 0.776471, 0.737255, 0.698039, 0.690196, 0.678431, 0.701961, 0.729412, 0.611765, 0.533333, 0.392157, 0.368627, 0.462745, 0.505882
    });
    return patch;
}

inline void testPixel()
{
    Pixel color({1,1,1});
    if(color.rU8() != 0xff)
        throw std::runtime_error(std::string(__FILE__) + ":" + std::to_string(__LINE__));

    Pixel px2(color);
    if(px2.rU8() != 0xff)
        throw std::runtime_error(std::string(__FILE__) + ":" + std::to_string(__LINE__));

    std::vector<Pixel> img(10, px2);
    if(img.back().rU8() != 0xff)
        throw std::runtime_error(std::string(__FILE__) + ":" + std::to_string(__LINE__));

    std::vector<Pixel> img2(img);
    img.insert(img.end(), img2.begin(), img2.begin() + 5);
    if(img.back().rU8() != 0xff)
        throw std::runtime_error(std::string(__FILE__) + ":" + std::to_string(__LINE__));


    {
        auto mat_a = random::uniform<Pixel>({3,3});
        if(mat_a(0,0).r() > 1)
            throw std::runtime_error(std::string(__FILE__) + ":" + std::to_string(__LINE__));
    }

}

inline void testImageResize()
{
    {// case 1
        Matrix<Pixel> img({2,2});
        img(0,0) = Pixel::black();
        img(0,1) = Pixel::white();
        img(1,0) = Pixel::black();
        img(1,1) = Pixel::white();

        auto img3x3 = resize(img, Shape({3,3}));
        if(img3x3(1,1) != Pixel({.5, .5, .5}))
        {
            std::cout << to_string(img3x3,2) << std::endl;
            throw std::runtime_error(std::string(__FILE__) + ":" + std::to_string(__LINE__));
        }
    }

    {//case 2
        Matrix<float> img({2,2},{0,1,2,3});
        Matrix<float> expected = Matrix<float>::ones({8,8});
        expected(Block({0,4},{0,4}))*=0;
        expected(Block({0,4},{4,8}))*=1;
        expected(Block({4,8},{0,4}))*=2;
        expected(Block({4,8},{4,8}))*=3;

        if(mxm::resize(img, 4, "nearest") != expected)
        {
            std::cout << to_string(mxm::resize(img, 4, "nearest"),2) << std::endl;
            throw std::runtime_error(std::string(__FILE__) + ":" + std::to_string(__LINE__));
        }
    }
}

inline void testPixelMemory()
{
    std::vector<Pixel> pxs;
    pxs.push_back(Pixel({0.5,0.25,0.125}));
    pxs.push_back(Pixel({0.5,0.25,0.125}));
    pxs.push_back(Pixel({0.5,0.25,0.125}));

    for(size_t i = 0;i < 9; i+= Pixel::size())
    {
        if(
            ((float*)pxs.data())[i+0] != 0.5 ||
            ((float*)pxs.data())[i+1] != 0.25 ||
            ((float*)pxs.data())[i+2] != 0.125)
        {
            std::cout << ((float*)pxs.data())[i+0] << ","
                << ((float*)pxs.data())[i+1] << ","
                << ((float*)pxs.data())[i+2] << std::endl;
            throw std::runtime_error(std::string(__FILE__) + ":" + std::to_string(__LINE__));
        }

    }
}

inline void testKernels()
{
    if(0){//case 01
        std::cout << mxm::to_string(kernel::gauss<float>(3)) << std::endl;
        std::cout << mxm::sum(kernel::gauss<float>(3)) << std::endl;
    }
}

inline void testBresenhamCircle()
{
    {
        // auto ret = halfQuarterBresenhamCircle(8.3);
        // expendFullBresenhamCircle(ret);
        // auto ret = bresenhamCircle(8.3);
        auto ret = bresenhamCircle(6);
        // std::cout << "ret size: " << ret.shape(1) << std::endl;
        // std::cout << mxm::to_string(ret) << std::endl;
    }

    {
        // auto cnt = 0;
        // traverseBresenhamCircleArea(3, {5,5}, [&](auto i, auto j){
        //     std::cout << cnt++ << " " ;//<< std::endl;
        //     std::cout << "(" << i << "," <<  j << ")" << std::endl;
        //     });
    }
}

inline void testBriefDescriptor()
{
    if(1){

        Matrix<float> raw(convolute(dataImagePatch(), kernel::gauss(3)));
        auto coord_buff = fastCorners(raw, 0.02);
        Matrix<size_t> fp_0 = gridPartitionNonMaximalSuppression(coord_buff, 1, 100);
        auto desc = calculateBriefDescriptor<8>(raw, fp_0);

        Matrix<float> rotated = flip(raw).T();
        coord_buff = fastCorners(rotated, 0.02);
        Matrix<size_t> fp = gridPartitionNonMaximalSuppression(coord_buff, 1, 100);
        auto desc_r = calculateBriefDescriptor<8>(rotated, fp);

        float delta_orientation = SO2ToAngle(
            mxm::rodrigues2D(desc(0,0).orientation()).T().matmul(
                mxm::rodrigues2D(desc_r(0,0).orientation())));
        if( abs(delta_orientation - M_PI_2) > 1 * eps() )
        {
            std::cout << delta_orientation << std::endl;
            throw std::runtime_error(std::string(__FILE__) + ":" + std::to_string(__LINE__));
        }

        if(desc_r(0,0).distance(desc(0,0)) > 0.2)
        {
            std::cout << "raw: " << mxm::to_string(fp_0.T()) << mxm::to_string(desc(0,0)) << std::endl;
            std::cout << "rotated: " << mxm::to_string(fp.T()) << mxm::to_string(desc_r(0,0)) << std::endl;
            std::cout << "distance: " << desc_r(0,0).distance(desc(0,0)) << std::endl;
            throw std::runtime_error(std::string(__FILE__) + ":" + std::to_string(__LINE__));
        }

    }

    // std::cout << mxm::to_string(flip (Matrix<float>::identity(3))) << std::endl;
}

inline void testHomography()
{
    {
        Matrix<float> pts_src({2,4},{2,3, 4,1, 5,5, 3,6}, COL);
        Matrix<float> pts_dst({2,4},{1,1, 3,1, 3,3, 1,3}, COL);
        Matrix<float> homo({1,4},{1,1,1,1});
        Matrix<float> expected = vstack(pts_dst, homo);
        auto mat_h = findHomographyMatrix(pts_src, pts_dst);
        // std::cout << mxm::to_string(mat_h) << std::endl;
        // return ;
        auto result = mat_h.matmul( vstack(pts_src, homo) );
        for(size_t i = 0; i < 4; i++) result(Col(i)) *= (1./result(2, i));

        if(norm(result - expected) > std::numeric_limits<float>::epsilon() * 50)
        {
            std::cout << "error norm:" << norm(result - expected) << std::endl;
            std::cout << "WARNING: todo fix.\n" << std::string(__FILE__) + ":" + std::to_string(__LINE__) << std::endl;
            if(norm(result - expected) > std::numeric_limits<float>::epsilon() * 150)
            {
                std::cout << mxm::to_string(mat_h) << std::endl;
                std::cout << mxm::to_string(result) << std::endl;
                std::cout << norm(result - expected) << std::endl;
                throw std::runtime_error(std::string(__FILE__) + ":" + std::to_string(__LINE__));
            }
        }
    }

    {
        Matrix<float> pts_src(fixRow(2),{2,3, 3,2, 4,1, 5,5, 4,5.5, 3,6}, COL);
        Matrix<float> pts_dst(fixRow(2),{1,1, 2,1, 3,1, 3,3, 2,3.0, 1,3}, COL);
        float error = 0.02;
        pts_dst += (random::uniform<float>(pts_dst.shape()) * error);
        Matrix<float> homo = Matrix<float>::ones({1, pts_dst.shape(1)});
        Matrix<float> expected = vstack(pts_dst, homo);

        auto mat_h = findHomographyMatrix(pts_src, pts_dst);
        auto result = mat_h.matmul( vstack(pts_src, homo) );
        for(size_t i = 0; i < pts_dst.shape(1); i++) result(Col(i)) *= (1./result(2, i));

        if(norm(result - expected) > error * 10 )
        {
            std::cout << (norm(result - expected)) << std::endl;
            throw std::runtime_error(std::string(__FILE__) + ":" + std::to_string(__LINE__));
        }

    }
}

inline void testICP()
{
    {
        size_t pt_num = 30;
        size_t dim = 3;
        Rotation<float> rot = Rotation<float>::fromAxisAngle({1,0,0}, M_PI * 0.25);
        auto pts = random::uniform<float>({dim, pt_num});
        for(size_t i = 0; i < dim; i++)
        {
            pts(Row(i)) -= mxm::sum(pts(Row(i))) / pt_num;
        }
        auto pts2 = rot.apply(pts);
        auto result = icpFindRotation(pts, pts2);
        if(!isIdentity(rot.asMatrix().matmul(result.asMatrix().T()), 5 * std::numeric_limits<float>::epsilon()))
        {
            std::cout << mxm::to_string(rot.asMatrix()) << std::endl;
            std::cout << mxm::to_string(result.asMatrix()) << std::endl;
            throw std::runtime_error(std::string(__FILE__) + ":" + std::to_string(__LINE__));
        }

    }
}

inline void testCvBasic()
{
    testPixel();
    testImageResize();
    testPixelMemory();
    testKernels();
    testBresenhamCircle();
    testBriefDescriptor();
    testHomography();
    testICP();
}
#else
inline void testCvBasic(){}
#endif
#endif // _TEST_PIXEL_H_
